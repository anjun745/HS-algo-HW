{"backend_state":"ready","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":82378752},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.3"}},"type":"settings"}
{"cell_type":"code","exec_count":3,"id":"806fdb","input":"# 4c: Test your algorithms agains the two test files `weighted_jobs_12.txt` and `weighted_jobs_10000.txt`\n\n# test file  'weighted_jobs_12.txt' should return weighted sums of completion times \n# of 69581 and 67247 for the two Greedy Algorithms\n\n# the second test file is weighted_jobs_10000 with 10,000 tasks.\n# feel free to post your solutions to this test file the #general channel\n\n# note, the file format is different than the tuples above\n# file format is:\n'''\nnum jobs\nweight length\nweight length\n...\n'''\n\n# your testing goes here\npass","pos":8,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":4,"id":"4636bf","input":"# Feel free to discuss in your groups some potential candidates for Greedy Rules\n# Describe your Greedy Rule for sorting here\n#\n#\n#\n\n# Write a function to minimize total lateness","pos":13,"state":"done","type":"cell"}
{"cell_type":"code","id":"2c7a11","input":"### Your explanation here","pos":5,"state":"done","type":"cell"}
{"cell_type":"code","id":"2f8f27","input":"# list of tasks in their order of completion\n# format of task tuples is (length, weight)\ntasks_1 = [(1,3),(2,2),(3,1)] # should return 15\ntasks_2 = [(3,1),(2,2),(1,3)] # should return 31\n\n# tasks 3 should return 10431\ntasks_3 = [(6, 6), (4, 3), (3, 4), (1, 3), (2, 7), (4, 5), (5, 5), (2, 5), (6, 10), (6, 10), (6, 2), (7, 9), (5, 9), (4, 3), (6, 8), (2, 6), (3, 8), (4, 5), (7, 4), (3, 2), (2, 6), (6, 4), (5, 1), (6, 6), (3, 7), (3, 5), (6, 2), (3, 2), (2, 7), (5, 9)]\n\n\n\ndef weighted_sum(tasks):\n    '''\n    return the weighted sum of completion times for a given schedule\n    '''\n    pass\n\n\n# test your function with the small samples above\n        \n        \n","pos":1,"state":"done","type":"cell"}
{"cell_type":"code","id":"45784b","input":"def lateness(list_of_tasks):\n    '''\n    given list_of_tasks as a list of tuples (length, deadline) where the length\n    is the processing time required for the task in minutes\n    and deadline is the time from the start, 0 when the task should be complete\n    lateness for any given task is defined as the difference between completion time and\n    the deadlin C-d.  If completion time is before the deadline, lateness\n    for that task should be 0, ie if C-d is negative, lateness = 0'''\n    elapsed = 0\n    total_lateness = 0\n    for length, deadline in list_of_tasks:\n        elapsed += length\n        late = elapsed - deadline\n        if late > 0:\n            total_lateness+=late\n    \n    return total_lateness\n\n# tasks in form (length, deadline)\ntasks_3 = [(1,3),(2,3),(3,5),(4,5),(3,7),(1,4),(1,3),(2,7),(3,6)]\n\nlateness(tasks_3)\n            \n        \n        \n        ","pos":10,"state":"done","type":"cell"}
{"cell_type":"code","id":"8270c3","input":"# If you try more than one rule, KEEP each one but identify the one that you think works best\n#\n# Describe your Greedy Rule for sorting here\n#\n#\n#\n\n# Write a function to minimize total lateness\n#\n#\n\n","pos":14,"state":"done","type":"cell"}
{"cell_type":"code","id":"afc0ad","input":"# NOTE: you may want to review how to sort using the key parameter in python\n# as explained here: https://wiki.python.org/moin/HowTo/Sorting\n\n# 4a\ndef GreedyDiff(list_of_tasks):\n    '''Takes in a list of tuples of form (length, weight) representing tasks/jobs in order\n    returns the list sorted, in place, in non-increasing order of the difference between weight and length\n    ie, weight-length'''\n    pass\n\n\n# 4b\ndef GreedyRatio(list_of_tasks):\n    '''Takes in a list of tuples of form (length, weight) representing tasks/jobs in order\n    returns the list sorted, in place, in non-increasing order of the weight/length ratio'''\n    pass\n\n","pos":7,"state":"done","type":"cell"}
{"cell_type":"code","id":"bcf71b","input":"# Test your Greedy Algorithm(s) by using your lateness function to determine how well they work\n\n# Simple set of tasks for testing your rule in the form (length, deadline)\ntasks = [(1,3),(2,3),(3,5),(4,5),(3,7),(1,4),(1,3),(2,7),(3,6)]\n\n# larger set of 222 tasks to test your rule\ntasks_big = [(26, 8716), (36, 6737), (32, 2403), (21, 191), (27, 4930), (7, 2265), (2, 2209), (23, 9807), (12, 7092), (5, 8664), (70, 9827), (25, 7259), (38, 4132), (3, 5030), (14, 3251), (53, 7712), (31, 9298), (49, 17), (52, 6742), (3, 6858), (21, 1526), (47, 1826), (63, 7468), (71, 2029), (2, 5546), (30, 1977), (47, 7234), (65, 1762), (45, 1825), (16, 9265), (48, 3277), (43, 8201), (73, 8799), (9, 1383), (14, 1431), (60, 7042), (47, 5513), (6, 5503), (25, 2651), (52, 1350), (65, 8825), (48, 7945), (28, 1993), (27, 2431), (74, 1627), (1, 9388), (51, 4863), (48, 2116), (74, 2219), (56, 4219), (65, 1761), (73, 9721), (75, 3980), (35, 7162), (21, 2651), (59, 4128), (12, 7796), (52, 8199), (69, 2988), (59, 3535), (21, 61), (65, 7995), (11, 2458), (55, 8907), (43, 3491), (2, 4900), (26, 4073), (35, 3801), (39, 6872), (67, 8082), (48, 9241), (74, 1617), (60, 5932), (62, 6808), (39, 2690), (8, 4511), (11, 6995), (20, 3724), (64, 7577), (49, 9881), (22, 745), (30, 5984), (61, 5743), (68, 9065), (27, 8006), (25, 8917), (32, 6451), (25, 2364), (20, 6858), (61, 2433), (33, 924), (73, 2096), (71, 2335), (54, 1897), (24, 7389), (23, 8621), (55, 1509), (57, 8367), (23, 5613), (35, 5313), (53, 1760), (44, 3300), (52, 5487), (64, 2556), (8, 3956), (62, 9343), (26, 6633), (62, 1822), (53, 4644), (75, 5964), (59, 9942), (24, 8462), (8, 4086), (38, 7454), (59, 8119), (27, 5280), (61, 2472), (5, 8283), (59, 399), (28, 2635), (40, 9489), (55, 6214), (67, 3322), (40, 5897), (9, 2016), (48, 6886), (30, 4587), (52, 3247), (30, 2229), (73, 3020), (46, 3803), (49, 480), (34, 6653), (2, 5512), (30, 5901), (45, 6022), (35, 1665), (17, 5323), (51, 2980), (70, 4343), (57, 7090), (31, 8690), (17, 878), (39, 3142), (68, 8276), (30, 9909), (29, 6758), (71, 810), (51, 1274), (35, 4893), (39, 8608), (74, 2541), (68, 1246), (8, 6473), (64, 9614), (34, 10000), (2, 4347), (61, 6045), (68, 4668), (16, 2384), (52, 979), (4, 4974), (35, 8766), (53, 7792), (44, 6688), (68, 2092), (54, 1962), (8, 3627), (35, 2827), (68, 1370), (26, 1735), (51, 8526), (1, 7966), (17, 978), (8, 4901), (31, 6102), (45, 7884), (17, 6251), (73, 9697), (21, 4313), (69, 237), (24, 1640), (7, 3325), (38, 5575), (23, 5092), (35, 6622), (22, 644), (60, 3417), (20, 3087), (40, 7810), (59, 7915), (26, 4541), (17, 8511), (30, 3019), (5, 2970), (29, 5318), (57, 3889), (35, 217), (74, 7540), (63, 6702), (9, 2596), (44, 5756), (61, 4399), (63, 8497), (27, 6494), (62, 4065), (72, 1687), (72, 4955), (58, 3646), (7, 7924), (35, 8564), (53, 7869), (75, 6730), (2, 5560), (75, 2211), (75, 7854), (47, 8017), (3, 8965), (72, 2417), (1, 4466), (73, 8479), (57, 4407)]\n\n# another test set of 200 tasks\ntasks_big2 = tasks_3 = [(4, 40), (27, 137), (24, 231), (48, 332), (53, 373), (13, 19), (6, 391), (38, 502), (30, 390), (21, 161), (12, 518), (24, 300), (32, 630), (61, 1013), (64, 184), (37, 1045), (33, 968), (63, 315), (64, 159), (11, 231), (75, 1440), (43, 791), (67, 550), (15, 423), (62, 1462), (30, 1148), (66, 1713), (70, 1414), (10, 1373), (28, 1558), (67, 1865), (4, 1156), (33, 495), (48, 1578), (54, 404), (46, 1774), (63, 433), (68, 638), (52, 793), (56, 2536), (71, 2326), (29, 1667), (26, 843), (62, 766), (1, 2431), (59, 2221), (67, 913), (68, 1652), (70, 1883), (60, 2412), (28, 1728), (59, 110), (1, 1613), (55, 3447), (54, 2916), (19, 2494), (1, 2689), (17, 1043), (13, 3551), (72, 2078), (20, 4340), (37, 3392), (68, 750), (57, 3900), (2, 4034), (65, 2600), (59, 3029), (57, 1263), (35, 1939), (64, 3307), (71, 4201), (32, 2943), (31, 1255), (37, 329), (70, 4954), (4, 3304), (8, 4112), (58, 5371), (57, 4581), (75, 1339), (37, 437), (8, 5273), (9, 1485), (33, 2274), (24, 108), (7, 4342), (72, 6522), (59, 2669), (18, 2218), (7, 6148), (27, 6057), (65, 5980), (31, 1411), (58, 6847), (39, 5209), (30, 410), (68, 1700), (56, 3548), (35, 1603), (29, 7157), (25, 817), (74, 6074), (15, 4661), (14, 5114), (29, 7136), (14, 1470), (42, 4767), (15, 5739), (2, 7385), (16, 4984), (65, 4207), (23, 1893), (14, 8228), (11, 3707), (65, 1986), (5, 7985), (4, 1499), (34, 4790), (32, 6467), (51, 8193), (3, 3454), (22, 7222), (43, 6698), (7, 3057), (8, 1115), (15, 2867), (27, 2902), (49, 679), (59, 7425), (19, 4243), (15, 6078), (5, 7025), (10, 3416), (29, 9401), (66, 465), (43, 1517), (10, 7435), (65, 2649), (40, 5931), (5, 2489), (40, 5044), (38, 7878), (59, 9365), (60, 6166), (58, 2060), (6, 5910), (75, 5875), (70, 11020), (54, 3876), (37, 10545), (67, 8113), (45, 7942), (24, 9174), (41, 4420), (25, 11425), (60, 8934), (29, 7883), (51, 7801), (45, 8937), (14, 3311), (58, 2270), (7, 5731), (59, 2779), (43, 11313), (2, 1622), (43, 1510), (56, 8584), (21, 9756), (42, 4856), (9, 10530), (36, 1380), (61, 3779), (55, 11955), (56, 9632), (7, 5339), (44, 2985), (69, 6681), (67, 242), (12, 540), (3, 6021), (8, 10154), (74, 11351), (31, 5611), (20, 7984), (18, 1110), (28, 10093), (66, 12026), (60, 5055), (69, 11787), (57, 10903), (33, 3229), (57, 12531), (8, 4188), (23, 1169), (7, 1351), (2, 1739), (3, 10091), (35, 13295), (53, 1033), (26, 223)]\n\n\n# Run your algorithm(s) on the above test cases\n","pos":16,"state":"done","type":"cell"}
{"cell_type":"code","id":"df456d","input":"### your explanation here","pos":3,"state":"done","type":"cell"}
{"cell_type":"code","id":"fb2d9c","input":"tasks_1 = [(72, 10), (46, 401), (13, 905), (57, 2713), (20, 8662), (3, 3673), (66, 3212), (25, 6273), (51, 8946), (28, 3990), (73, 5276), (11, 6516), (64, 811), (54, 2670), (45, 9620), (72, 9626), (29, 4870), (3, 8026), (23, 4981), (22, 6427), (20, 5560), (72, 2967), (53, 5050), (22, 4616), (25, 7518), (2, 1717), (64, 9063), (65, 7679), (9, 8413), (68, 8952), (33, 6844), (31, 6044), (63, 4675), (10, 7101), (12, 9242), (18, 7339), (62, 1110), (61, 2736), (68, 1447), (29, 1783), (14, 8027), (62, 8815), (43, 4355), (5, 6028), (25, 9981), (70, 4438), (67, 8173), (6, 900), (64, 9936), (59, 8188), (61, 6674), (41, 1593), (56, 5647), (46, 3443), (75, 890), (24, 5218), (70, 8925), (65, 873), (75, 4190), (40, 7461), (38, 1526), (1, 965), (44, 8947), (18, 1778), (67, 4816), (70, 1897), (22, 5841), (17, 1891), (20, 4838), (19, 3589), (1, 7101), (6, 6107), (47, 3365), (51, 806), (35, 5310), (67, 192), (39, 8689), (53, 2028), (60, 198), (33, 9530), (21, 8930), (71, 8847), (21, 5980), (11, 4609), (53, 738), (60, 5190), (73, 3116), (15, 4202), (47, 3431), (17, 1551), (29, 2189), (8, 4193), (18, 7816), (63, 9943), (8, 1545), (72, 3478), (42, 6560), (5, 7888), (73, 1245), (28, 9055), (60, 7165), (15, 3593), (72, 3979), (29, 1894), (31, 5502), (72, 1370), (68, 2766), (48, 395), (68, 8462), (75, 8944), (59, 6173), (75, 6815), (47, 9621), (45, 478), (15, 6189), (72, 6358), (69, 8715), (35, 8404), (17, 7408), (23, 9889), (71, 5695), (16, 8957), (38, 859), (54, 8188), (74, 6407), (49, 6394), (74, 8333), (53, 6386), (33, 8252), (11, 9171), (19, 9420), (41, 2140), (65, 9686), (55, 9038), (71, 1795), (16, 8619), (34, 2498), (24, 1641), (64, 4702), (44, 5584), (59, 7490), (59, 8427), (7, 6191), (49, 943), (44, 3298), (26, 1021), (14, 9988), (35, 489), (12, 6992), (22, 8074), (28, 5784), (60, 9958), (20, 6646), (60, 7087), (68, 8584), (62, 9959), (46, 182), (9, 1037), (15, 1342), (39, 9519), (14, 6499), (14, 5407), (10, 4183), (62, 8233), (44, 1682), (59, 3835), (64, 3787), (8, 1110), (46, 9132), (26, 105), (67, 1190), (20, 9195), (43, 4937), (23, 2649), (16, 9619), (54, 7093), (33, 1409), (20, 3508), (19, 7420), (66, 4869), (32, 5380), (31, 192), (26, 6274), (13, 3319), (43, 1996), (47, 540), (74, 6738), (51, 5771), (70, 4031), (40, 7693), (35, 5354), (44, 9545), (65, 4075), (1, 5121), (41, 4425), (24, 1048), (18, 4757), (17, 1225), (31, 1033), (26, 7203), (34, 6366), (55, 1335), (69, 1613), (42, 9897), (35, 6685), (44, 3179), (44, 7045), (67, 4535), (22, 6593), (14, 8120), (64, 6239), (36, 909), (14, 249), (26, 4805), (28, 4771), (18, 1983), (46, 3138), (9, 5029), (33, 8553), (30, 5631), (30, 3258), (25, 9552), (24, 3676), (66, 9369), (29, 4752), (32, 5256), (40, 2845), (18, 6541), (58, 1250), (28, 7912)]\ntasks_3 = [(4, 40), (27, 137), (24, 231), (48, 332), (53, 373), (13, 19), (6, 391), (38, 502), (30, 390), (21, 161), (12, 518), (24, 300), (32, 630), (61, 1013), (64, 184), (37, 1045), (33, 968), (63, 315), (64, 159), (11, 231), (75, 1440), (43, 791), (67, 550), (15, 423), (62, 1462), (30, 1148), (66, 1713), (70, 1414), (10, 1373), (28, 1558), (67, 1865), (4, 1156), (33, 495), (48, 1578), (54, 404), (46, 1774), (63, 433), (68, 638), (52, 793), (56, 2536), (71, 2326), (29, 1667), (26, 843), (62, 766), (1, 2431), (59, 2221), (67, 913), (68, 1652), (70, 1883), (60, 2412), (28, 1728), (59, 110), (1, 1613), (55, 3447), (54, 2916), (19, 2494), (1, 2689), (17, 1043), (13, 3551), (72, 2078), (20, 4340), (37, 3392), (68, 750), (57, 3900), (2, 4034), (65, 2600), (59, 3029), (57, 1263), (35, 1939), (64, 3307), (71, 4201), (32, 2943), (31, 1255), (37, 329), (70, 4954), (4, 3304), (8, 4112), (58, 5371), (57, 4581), (75, 1339), (37, 437), (8, 5273), (9, 1485), (33, 2274), (24, 108), (7, 4342), (72, 6522), (59, 2669), (18, 2218), (7, 6148), (27, 6057), (65, 5980), (31, 1411), (58, 6847), (39, 5209), (30, 410), (68, 1700), (56, 3548), (35, 1603), (29, 7157), (25, 817), (74, 6074), (15, 4661), (14, 5114), (29, 7136), (14, 1470), (42, 4767), (15, 5739), (2, 7385), (16, 4984), (65, 4207), (23, 1893), (14, 8228), (11, 3707), (65, 1986), (5, 7985), (4, 1499), (34, 4790), (32, 6467), (51, 8193), (3, 3454), (22, 7222), (43, 6698), (7, 3057), (8, 1115), (15, 2867), (27, 2902), (49, 679), (59, 7425), (19, 4243), (15, 6078), (5, 7025), (10, 3416), (29, 9401), (66, 465), (43, 1517), (10, 7435), (65, 2649), (40, 5931), (5, 2489), (40, 5044), (38, 7878), (59, 9365), (60, 6166), (58, 2060), (6, 5910), (75, 5875), (70, 11020), (54, 3876), (37, 10545), (67, 8113), (45, 7942), (24, 9174), (41, 4420), (25, 11425), (60, 8934), (29, 7883), (51, 7801), (45, 8937), (14, 3311), (58, 2270), (7, 5731), (59, 2779), (43, 11313), (2, 1622), (43, 1510), (56, 8584), (21, 9756), (42, 4856), (9, 10530), (36, 1380), (61, 3779), (55, 11955), (56, 9632), (7, 5339), (44, 2985), (69, 6681), (67, 242), (12, 540), (3, 6021), (8, 10154), (74, 11351), (31, 5611), (20, 7984), (18, 1110), (28, 10093), (66, 12026), (60, 5055), (69, 11787), (57, 10903), (33, 3229), (57, 12531), (8, 4188), (23, 1169), (7, 1351), (2, 1739), (3, 10091), (35, 13295), (53, 1033), (26, 223)]\n#tasks_3.sort(key=lambda task: task[0]*task[1])\n#tasks_3.sort(key=lambda task: (task[1],task[0]))\n#tasks_3.sort(key=lambda task: task[1])\n#tasks_3.sort(key=lambda task: task[0])\nlateness(tasks_3)","pos":12,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"066c70","input":"### Day 1, Exercise 4a, GreedyDiff\n\nGiven the answers to 2 and 3 above, it seems that shorter tasks should come earlier than longer tasks, and higher weighted tasks should come before lower weighted tasks (your explanations above should explain why).  This suggests a couple different Greedy Algorithm options for minimizing the sum of weighted completion times.\n\n4a. GreedyDiff -- This sorts the tasks in non-increasing order of the $weight - length$ of tasks.  So high weights of short length would come before low weights of high length.\n  \n### Day 1, Exercise 4b, GreedyRatio\n\n4b. GreedyRatio -- This schedules jobs in non-incrasing order of $\\frac{weight}{length}$ of tasks.  Those with a higher weight to length ratio would come before lower ratios.\n\n\n### Day 1, Exercise 4c, TEST each agains 2 test files, and indicate which seems better","pos":6,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"1d5b59","input":"### Day 2, Creating your own Greedy Algorithm Rule\n\nYou are given a list of $n$ jobs, each with processing time length $l_j$ and a deadline $d_j$.  Define the *lateness* $\\lambda$ (pronounced lambda) of a job $j$ in a schedule $\\sigma$ (sigma) to be the difference between the completion time (see Day 1 above for completion time definition) minus the deadline, ie, $C(\\sigma)-d_j$\n\nYour goal for Day 2 is to design a greedy algorithm rule to minimize the total lateness of the jobs.\n\nTo guide your thinking, create small samples sets (maybe 2 tasks) to brainstorm candidates for \"Greedy\" Rules for your algorithm.  To prove correctness of your solution, consider an exchange argument as discussed in lecture and this [Tim Roughgarden Video](https://youtu.be/oyLxydVkQwo)\n\n\n#### Day 2, Exercise 1\nWrite a function to determine the total lateness of a given schedule","pos":9,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"3a6296","input":"### Day 2, Exercise 3\n\nTest your Algorthm(s) using your `lateness` function and determine if you have a good Greedy Algorithm","pos":15,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"5a095d","input":"### Day 1, Exercise 2\n\nIf the weights of all tasks were equal, which tasks should come first to decrease the sum of completion times?  Explain.","pos":2,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"660607","input":"### Day 2, Exercise 2\nDefine a rule for sorting the tasks that would minimize the total lateness.","pos":11,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"c7d635","input":"### Intro to Greedy Algorithms\n* Assignment inspired from example in *Algorithms Illuminiated Volume 3* by Tim Roughgarden\n\nA greedy algorithm is an approach that constructs solutions by making a series of short-sighted decisions based on a \"rule\" and hoping this creates the best solution in the end.  We have already seen one such algorithm in Dijkstra's Single Source Shortest Path Algorithm, with the only rule being to add the node that creates the shortest path from the explored nodes to the unexplored.  This simple rule applied over and over until all nodes have been reached results in the correct result of the shortest path from a single node to every other node on the graph.\n\nWhile it may be easy to come up with a \"rule\" to implement, and it may be that this rule creates a good result, it is often the case the the rule will not necessarily produce the correct or BEST result.\n\nProving that your rule produces the best result is often very difficult.\n\n#### Example 1: A simple Scheduling Problem\n\nOften, when things need to be sheduled, you have to prioritize which jobs or \"tasks\" to complete first.  This can be true when assigning a computer to do tasks in a certain order, but can also be used in your own life like doing homework or determining the best order for completing the tasks on a to-do list.\n\nThe first step in the process is to determine an **objective function** which gives you a way to evaluate and compare different potential schedules.  To do this, we'll use two ideas:\n    1. Completion Time of a task\n    2. The Sum of Weighted Completion Times.\n    \n#### Calculating Completion Times\nGiven a series of tasks of length 1, 2 and 3\n\n<table>\n    <tr>\n        <th>&nbsp;</th>\n        <th>Task1</th>\n        <th>Task2</th>\n        <th>Task3</th>\n    </tr>\n    <tr>\n        <td>Length</td>\n        <td>1</td>\n        <td>2</td>\n        <td>3</td>\n    </tr>\n    <tr>\n        <td>Completion Time</td>\n        <td>1</td>\n        <td>3</td>\n        <td>6</td>\n    </tr>\n</table>\n\nThe completion time of a task is the time elapsed before the task is complete.  So, task 1 is complete after 1 minute, but task 2 must wait for task 1 to finish before it can start, so its completion time is 1 + 2 = 3 minutes.  Similarly, task 3 must wait for both 1 and 2 to finish, so its completion time is 1+2+3 = 6.  The sum of these completion times would be 10 minutes.  If you reversed the order however, your completion times would be 3, then 5 then 6, for a total of 14.  Clearly, scheduling the shortest tasks first makes for a better schedule.  \n\nOf course, some tasks are usually more important than others.  This can be determined by a weight or priority.  The higher the weight of the task, the more important it is.  In this case, the goal of a good schedule is to minimize the sum of the weighted completion times, or equivalently, minimizing the average weighted completion time.\n\nfor example, given 3 tasks with completion times and weights:\n\n<table>\n    <tr>\n        <th>&nbsp;</th>\n        <th>Task1</th>\n        <th>Task2</th>\n        <th>Task3</th>\n    </tr>\n    <tr>\n        <td>Length</td>\n        <td>1</td>\n        <td>2</td>\n        <td>3</td>\n    </tr>\n    <tr>\n        <td>Weight</td>\n        <td>3</td>\n        <td>2</td>\n        <td>1</td>\n    </tr>\n        <tr>\n        <td>Completion Time</td>\n        <td>1</td>\n        <td>3</td>\n        <td>6</td>\n    </tr>\n        <tr>\n        <td>Weighted Completion time</td>\n        <td>3*1=3</td>\n        <td>2*3=6</td>\n        <td>1*6=6</td>\n    </tr>\n</table>\n\nSo, the sum of the weighted completion times is 15.  Mathematically, this can be expressed as the minimum over all possible schedules **x** of the sum of the weighted completion times for all jobs, *j*, times the completion time $C_j(x)$ for all jobs in **x**.\n\n$min\\sum_{j=1}^{n} w_jC_j(x)$\n\n### Day 1, Excercise 1: Write a Function to return the weighted sum of completion times for a given schedule\n","pos":0,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"fdf697","input":"### Day 1 , Exercise 3\n\nIf the lengths of all tasks were equal, which tasks should come first to decrease total weighted completion times? Explain.","pos":4,"state":"done","type":"cell"}
{"id":0,"time":1606698881517,"type":"user"}
{"last_load":1606698882392,"type":"file"}